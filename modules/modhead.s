// Generated by CMunge 0.78 (17 Dec 2021)
// CMunge Copyright (c) 1999-2006 Robin Watts/Justin Fletcher


// Now the REAL module header
.section .init.rmf

.global __module_header
__module_header:

_CMUNGE_origin:
.word   0                   // Start offset
.word   (1<<30) + (_CMUNGE_init     -_CMUNGE_origin)    // Initialisation offset
.word   _CMUNGE_fin     -_CMUNGE_origin // Finalisation offset
.word   0                   // Service handler offset
.word   _CMUNGE_title       -_CMUNGE_origin // Title string offset
.word   _CMUNGE_help        -_CMUNGE_origin // Help string offset
.word   _CMUNGE_command     -_CMUNGE_origin // Command table offset
.word   0x000562c0              // SWI chunk base number
.word   _CMUNGE_swi_handler -_CMUNGE_origin // SWI handler offset
.word   _CMUNGE_swi_table   -_CMUNGE_origin // SWI table offset
.word   0           // SWI decoding code offset
.word   0           // Message file filename offset
.word   _CMUNGE_module_flags    -_CMUNGE_origin // Module flags offset
_CMUNGE_title:
.asciz "TestModule"
_CMUNGE_help:
.ascii "TestModule"
.byte 9
.asciz "0.01 (21 May 2025) (c) Justin Fletcher"
_CMUNGE_swi_table:
.asciz "TestModule"
.asciz "Call"
.asciz ""
.balign 4
.balign 4
_CMUNGE_command:
.asciz "TestModuleCommand"
.balign 4
.word   _CMUNGE_ce0 - _CMUNGE_origin
.word   0x00000000
.word   0
.word   0
.word   0
_CMUNGE_ce0:
    MOV     x2,#0
    B       _CMUNGE_ce
_CMUNGE_ce:
    STP     x29, x30, [sp, #-16]!
    STR     x0, [sp, #-16]!
    MOV     x3, x12
    // IMPORT  Mod_Command
    BL      Mod_Command
    LDR     x1, [sp], #16

    LDP     x29, x30, [sp], #16

// x1=x0 => x0
// x0=0  => x0
// x0=-1 => 4   (new value for RISC OS 64)
//       => x0

    CMP     x0, #0
    CCMP    x0, x1, #4, ne
    BEQ     _CMUNGE_ce_exit
    CMN     w0, #1
    MOV     x1, #4
    CSEL    x0, x0, x1, ne
_CMUNGE_ce_exit:
    RET

_CMUNGE_module_flags:
.word   0 + (1<<2) + (1<<4) // 32bit NOT supported + zero-init present + AArch64
.word   __ZISize            // Size of our Zero initialised area


// => r0-> start string
//    r1 = instance number (always 0)
//    r12 = private word pointer
// <= r0 = pointer to error, or 0 if no error
_CMUNGE_init:
    STP     x29, x30, [sp, #-16]!
    STR     x12, [sp, #-16]!
    STP     x0, x1, [sp, #-16]!
    MOV     x0, x12
    BL      _clib_initialisemodule
    CMP     x0, #0
    BNE     _CMUNGE_init_fail

_CMUNGE_init_ok:
    LDP     x0, x2, [sp], #16
    LDR     x1, [sp]

    BL      Mod_Init                    // (tail, instance (0), pwp)

    CMP     x0, #0
    BEQ     _CMUNGE_init_exit

    STR     x0, [sp, #8]                // preserve error pointer
    LDR     x0, [sp]
    BL      _clib_finalisemodule
    LDR     x0, [sp, #8]
    B       _CMUNGE_init_exit

_CMUNGE_init_fail:
    ADD     sp, sp, #16
_CMUNGE_init_exit:
    ADD     sp, sp, #16
    LDP     x29, x30, [sp], #16
    RET


// => x12 = private word pointer
// <= x0 = pointer to error, or 0 if no error
_CMUNGE_fin:
    STP     x29, x30, [sp, #-16]!
    STR     x12, [sp, #-16]!
    MOV     x0, x12
    BL      Mod_Final                   // (pwp)
    CMP     x0, #0
    BNE     _CMUNGE_final_10
    STR     x0, [sp, #8]                // preserve error pointer
    LDR     x0, [sp]
    BL      _clib_finalisemodule
    LDR     x0, [sp, #8]

_CMUNGE_final_10:
    ADD     sp, sp, #16
    LDP     x29, x30, [sp], #16
    RET


// => x0 = SWI number
//    x1-> register block (x0 to x9)
//    x12-> private word pointer
// <= x0 = pointer to error, or 0 if no error, or -1 for No such SWI
_CMUNGE_swi_handler:
    STP     x29, x30, [sp, #-16]!
    MOV     x2, x12
    CMP     x0, #9 - 1
    BHI     _CMUNGE_noswi_handler

    ADR     x3, _CMUNGE_swi_dispatch
    LDR     w4, [x3, x0, LSL #2]
    ADD     x3, x3, w4, uxtw
    ADR     x30, _CMUNGE_swi_ret
    BR      x3                          // (regs, swino, pwp)

_CMUNGE_swi_dispatch:
.word SWI_Call - _CMUNGE_swi_dispatch

_CMUNGE_noswi_handler:
    MOV     x0,#-1
_CMUNGE_swi_ret:
    // r0 = pointer to error, or 0 if no error, or -1 for No such SWI
    LDP     x29, x30, [sp], #16
    RET


// END
