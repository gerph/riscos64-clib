#!/bin/bash
##
# Invoke the toolchain for RISC OS 64 tools.
#
# This is a very cut down version of the tooling for the RISC OS Build environment.
#

# Errors are fatal
set -e

if [[ "$RO64DEBUG" == '1' ]] ; then
    DEBUG=true
else
    DEBUG=false
fi

function canonicalise() {
    local f=$1
    local dir
    dir="$(cd "$(dirname "$f")" > /dev/null && pwd -P)"
    if [[ "$dir" == '/' ]] ; then
        echo "/$(basename "$f")"
    else
        echo "$dir/$(basename "$f")"
    fi
}

SCRIPTDIR="$(canonicalise "$(dirname "$0")")"

# Where we'll store things that we generate
cache=${XDG_CACHE_HOME:-$HOME/.cache}/riscos-build64

# Tools
CC=aarch64-unknown-linux-gnu-gcc
AS=aarch64-unknown-linux-gnu-as
LD=aarch64-unknown-linux-gnu-ld
AR=aarch64-unknown-linux-gnu-ar
OBJCOPY=aarch64-unknown-linux-gnu-objcopy
OBJDUMP=aarch64-unknown-linux-gnu-objdump
ROSYMBOLS=/ro64/clib/bin/riscos64-addsignatures
RORELOC=/ro64/clib/bin/riscos64-mkreloc

RO64EXPORT=${RO64EXPORT:-/ro64/clib}

# Location of the C library
CLIB64=${CLIB64:-${SCRIPTDIR}/..}

# How many parent directories we should use in our mounted directory
RISCOS64_RELDIRS=${RISCOS64_RELDIRS:-0}

# Whether we're using the 'ld -Map' or 'objdump' symbols method.
use_ldmap=false

tmp_reloc=/tmp/ro64reloc.$$
function cleanup() {
    local rc=$?
    rm -f "$tmp_reloc"
    return $?
}

if $DEBUG ; then
    function debug() {
        echo "DEBUG: $*" >&2
    }
else
    function debug() {
        :
    }
fi

CLIB64=$(canonicalise "$CLIB64")

libcrt="${RO64EXPORT}/libcrt.a"


function riscos64_cc_help() {
    cat <<EOM
RISC OS 64 bit wrapper for GCC.
Syntax: $tool [<options>] <sourcefile> <objectfile>
        $tool [<options>] -o <objectfile> <sourcefile>

-l<lib>         Add library to the linked object
-c              Just compile (no linking)
-o <file>       Output file; for linking suffix with ',ff8'
-E              Apply preprocessor

--help          Print this information
--help-gcc      Print help for GCC arguments

Implicit defines:
    __riscos
    __riscos64

Implicit includes:
    .
    ${RO64EXPORT}/C
    ${RO64EXPORT}/Lib/
    ${RO64EXPORT}/
EOM
}



function riscos64_cc() {
    local inargs=("$@")
    local args=()
    local arg
    local output
    local nextarg
    local libs=()
    local libargs=()
    local type=ff8
    local name
    local one_file
    local many_files
    local linker_script
    local entry
    local elf
    local function_entry_patchable
    local extra_flags=()
    local cmds=()

    # Default output name
    default_aif='!RunImage'

    # How large our patch region is (or empty to not add)
    function_entry_patchable=8

    extra_flags=()

    # Remove the flags that might make code think it's compiling for linux system.
    extra_flags+=(-U__linux -U__linux__ -U__unix__ -U__unix -Ulinux -Uunix -U__gnu_linux__)

    # Add the definitions to indicate that we're compiling for RISC OS
    extra_flags+=(-D__riscos -D__riscos64)

    # Allow us to build without assuming the standard library is present
    extra_flags+=(-nostdlib -ffreestanding -march=armv8-a)

    # Add the exports directory to those things we'll build with
    extra_flags+=(-I. \
                  -I${RO64EXPORT}/C \
                  -I${RO64EXPORT}/Lib/ \
                  -I${RO64EXPORT}/)

    # Options to allow function signatures to appear RISC OS-like
    if [[ "$function_entry_patchable" != '' ]] ; then
        extra_flags+=(-fpatchable-function-entry=$function_entry_patchable,$function_entry_patchable)
    fi

    # Accumulate some args
    compile_only=false
    preprocess=false
    output=
    one_file=
    objs=()
    many_files=()
    args=()
    # We default to position independant code - though the user can turn that off
    pic=-fPIC
    for arg in "${inargs[@]}" ; do
        if [[ "$nextarg" != '' ]] ; then
            if [[ "$nextarg" = 'output' ]] ; then
                nextarg=''
                output=$arg
                continue
            fi
            nextarg=''

        elif [[ "$arg" == '-help' || "$arg" == '--help' ]] ; then
            riscos64_cc_help
            exit 0

        elif [[ "$arg" == '-help-gcc' || "$arg" == '--help-gcc' ]] ; then
            "$CC" --help
            exit 0

        elif [[ "$arg" == '-c' ]] ; then
            compile_only=true

        elif [[ "$arg" == '-fpic' || "$arg" == '-fPIC' || "$arg" == '-fno-pic' ]] ; then
            pic="$arg"

        elif [[ "$arg" == '-E' ]] ; then
            preprocess=true

        elif [[ "$arg" == '-o' ]] ; then
            nextarg=output
            continue

        elif [[ "$arg" =~ ^-l(.*)$ ]] ; then
            libargs+=("$arg")
            libs+=("${BASH_REMATCH[1]}")
            continue

        elif [[ "$arg" =~ /?([^/]*)\.[o]$ ]] ; then
            objs+=("$arg")

        elif [[ "$arg" =~ /?([^/]*)\.[cs]$ ]] ; then
            if [[ "$one_file" == '' ]] ; then
                one_file="${BASH_REMATCH[1]}"
            else
                one_file='*'
                debug "There are many files to build from"
            fi
            many_files+=("$arg")
            debug "Will build from: '$arg'"
        fi
        args+=("$arg")
    done

    args+=("$pic")

    if [[ "${#objs}" != 0 && "${#many_files}" = 0 ]] ; then
        # They just wanted to use us as a linker.
        # Go straight to the link stage, BUT we may need to tweak the
        # target binary name.
        debug "Used as a linker"

        if [[ "$output" =~ /?([^/]*),[0-9a-f][0-9a-f][0-9a-f]$ ]] ; then
            :
        else
            # Default to making an executable
            output="$output,ff8"
        fi

        cmds=("$(riscos64-link "${objs[@]}" "${libargs[@]}" '-o' "$output")")
        echo "${cmds[*]}"
        return

    elif ! $compile_only && ! $preprocess ; then
        debug "Making a target binary"

        # They wanted to build a target binary
        if [[ "$one_file" != '*' ]] ; then
            # Just one file to build (or no files)
            if [[ "$output" = '' ]] ; then
                output="${one_file},ff8"
                target="${one_file}"
                ofile="${one_file}.o"
            else
                if [[ ! "${output}" =~ ,ff8$ ]] ; then
                    output="${output},ff8"
                fi
                ofile="${one_file}.o"
                target="${one_file}"
            fi
        else
            # Many files
            if [[ "$output" = '' ]] ; then
                output="${default_aif},ff8"
                target="${default_aif}"
                ofile="${default_aif}.o"
            fi
        fi
        elf="${target}.elf"
        if [[ "$output" != '' ]] ; then
            if [[ "$output" =~ /?([^/]*),[0-9a-f][0-9a-f][0-9a-f]$ ]] ; then
                target="${BASH_REMATCH[1]}"
                ofile="$target.o"
            else
                target="__many__"
                ofile="$target.o"
            fi
            if [[ "$target" != '' ]] ; then
                args+=(-c -o "${ofile}")
            fi
        fi
    else
        debug "Just compiling code"

        if [[ "$output" != '' ]] ; then
            args+=(-o "${output}")
        fi
    fi

    cmds=("$CC" "${extra_flags[@]}" "${args[@]}")
    if ! $compile_only && ! $preprocess && [[ "$one_file" != '' ]] ; then
        cmds+=("&&" "$(riscos64_link "${ofile}" "${libargs[@]}" '-o' "$output")")
    fi

    echo "${cmds[*]}"
}


function riscos64_as() {
    local inargs=("$@")
    local args=()
    local arg
    local extra_flags=()

    extra_flags=()

    # Add the definitions to indicate that we're compiling for RISC OS
    extra_flags+=(-defsym __riscos=1 -defsym __riscos64=1)

    # Add the exports directory to those things we'll build with
    extra_flags+=("-I${RO64EXPORT}/asm")

    # Define the architecture
    extra_flags+=(-march=armv8-a)

    args=()
    for arg in "${inargs[@]}" ; do
        # FIXME: We don't actually have any special flags yet.
        args+=("$arg")
    done

    cmds=("$AS" "${extra_flags[@]}" "${args[@]}")

    echo "${cmds[*]}"
}


function riscos_libfile() {
    local inargs=("$@")
    local args=()
    local arg
    local output
    local nextarg
    local lib
    local create=false
    local replace=false
    local delete=false
    local extract=false
    local many_files=()

    for arg in "${inargs[@]}" ; do
        if [[ "$nextarg" != '' ]] ; then
            # No nextarg processing
            nextarg=''

        elif [[ "$arg" == '-h' ]] ; then
            cat <<EOM
Create or manipulate a library for RISC OS 64.
Syntax: $0 <options> <library> <file-list>*
    -c      Create a new library containing files in <file-list>.
    -i      Insert files in <file-list>, replace existing members of the same name.
    -d      Delete the members in <member_list>.
    -e      Extract members in <member_list> placing in files of the same name.
    -o      Add an external symbol table to an object library. (N/I)
    -l      List library, may be specified with any other option. (N/I)
    -s      List symbol table, may be specified with any other option. (N/I)
    -v file Take additional arguments from via file. (N/I)
EOM
            exit 0

        elif [[ "$arg" == '-c' ]] ; then
            create=true
            continue

        elif [[ "$arg" == '-i' ]] ; then
            create=false
            replace=true
            continue

        elif [[ "$arg" == '-d' ]] ; then
            delete=true
            continue

        elif [[ "$arg" == '-e' ]] ; then
            extract=true
            continue

        elif [[ "${arg:0:1}" == '-' ]] ; then
            echo "Unrecognised option: $arg" >&2
            exit 1

        else
            if [[ "$lib" = '' ]] ; then
                lib=$arg
                continue
            fi

            many_files+=("$arg")
        fi
    done

    if [[ "$lib" = '' ]] ; then
        echo "Library name is required" >&2
        exit 1
    fi

    if $create ; then
        rm -f "$lib"
        args+=(-rc)
    fi
    if $replace ; then
        args+=(-r)
    fi
    if $delete ; then
        args+=(-d)
    fi
    if $extract ; then
        args+=(-x)
    else
        # If not extracting, write object file index to be faster.
        args+=(-s)
    fi

    cmds=("$AR" "${args[@]}" "$lib" "${many_files[@]}")

    echo "${cmds[*]}"
}


function riscos64_link_help() {
    cat <<EOM
Link ELF files into a binary for RISC OS 64.
Syntax: $tool <options> <file>*
Options:
    -rmf        Create a Relocatable Module File
    -aif        Create a AIF absolute file
    -util       Create a Utility file
    -o <file>   Specify output file (default object, !RunImage, Module, Utility)
    -T          Override linker script to use
    -l<file>    Link with library
    -nostdlib   Do not link with C library (libcrt.a)
EOM
}

function riscos64_link() {
    local inargs=("$@")
    local args=()
    local arg
    local output
    local nextarg
    local lib
    local type=ff8
    local name
    local one_file
    local linker_script
    local entry
    local elf
    local many_files=()

    for arg in "${inargs[@]}" ; do
        if [[ "$nextarg" != '' ]] ; then
            if [[ "$nextarg" = 'output' ]] ; then
                output=$arg
                nextarg=''
                continue
            elif [[ "$nextarg" = 'script' ]] ; then
                linker_script=$arg
                nextarg=''
                continue
            fi
            nextarg=''

        elif [[ "$arg" == '-h' || "$arg" == '-help' || "$arg" == '--help' ]] ; then
            riscos64_link_help
            exit 0

        elif [[ "$arg" == '-rmf' ]] ; then
            # RISC OS specific option
            type=ffa
            continue

        elif [[ "$arg" == '-aif' ]] ; then
            # RISC OS specific option
            type=ff8
            continue

        elif [[ "$arg" == '-util' ]] ; then
            # RISC OS specific option
            type=ffc
            continue

        elif [[ "$arg" == '-o' ]] ; then
            # Output isn't added to the linker right now.
            nextarg=output
            continue

        elif [[ "$arg" == '-nostdlib' ]] ; then
            libcrt=''
            continue

        elif [[ "$arg" == '-T' ]] ; then
            nextarg=script

        elif [[ "$arg" =~ ^-l(.*)$ ]] ; then
            lib=${BASH_REMATCH[1]}
            # Library specified, so we need to resolve it.
            arg=${RO64EXPORT}/lib${lib}.a

        elif [[ "$arg" =~ /?([^/]*)\.[oa]$ ]] ; then
            if [[ "$one_file" == '' ]] ; then
                one_file="${BASH_REMATCH[1]}"
            else
                one_file='*'
            fi
            many_files+=("$arg")
        fi
        args+=("$arg")
    done

    if [[ "$output" == "" ]] ; then
        if [[ "$one_file" != '*' ]] ; then
            output="$one_file,$type"
        elif [[ "$type" = 'ff8' ]] ; then
            output="!RunImage,ff8"
        elif [[ "$type" = 'ffa' ]] ; then
            output="Module,ffa"
        elif [[ "$type" = 'ffc' ]] ; then
            output="Utility,ffc"
        else
            output="RISCOS,$type"
        fi
    fi

    if [[ "$output" =~ ,([0-9a-f][0-9a-f][0-9a-f])$ ]] ; then
        type=${BASH_REMATCH[1]}
    fi

    if [[ "$type" = 'ff8' ]] ; then
        linker_script=${RO64EXPORT}/linker/aif.lnk
        entry=_aif64_entry
    elif [[ "$type" = 'ffa' ]] ; then
        linker_script=${RO64EXPORT}/linker/rmf.lnk
        entry=_rmf64_header
    elif [[ "$type" = 'ffc' ]] ; then
        linker_script=${RO64EXPORT}/linker/utility.lnk
        entry=_util64_header
    fi

    if [[ "$libcrt" != '' ]] ; then
        args+=("${libcrt}")
    fi

    if [[ "$linker_script" != '' ]] ; then
        args+=("-T" "$linker_script")
    fi

    if [[ "$entry" != '' ]] ; then
        args+=('-e' "$entry")
    fi

    if [[ "$output" == '' || "$output" == ",$type" ]] ; then
        echo "No output filename specified to riscos64-link" >&2
        riscos64_link_help
        exit 1
    fi

    if [[ "$type" == 'e1f' ]] ; then
        # If they requested ELF then no further processing is done
        cmds=("$LD" "${args[@]}" "-o" "$output")
    else
        if [[ "$output" =~ ^(.*),([0-9a-f][0-9a-f][0-9a-f])$ ]] ; then
            output_elf="${BASH_REMATCH[1]}.elf"
            output_syms="${BASH_REMATCH[1]}.syms"
        else
            output_elf="${output}.elf"
            output_syms="${output}.syms"
        fi
        # First we need to know what the relocations within .data.rel will be
        # Then we generate the table of relocations that can be executed at run time.
        # And we include both the table of relocations, and the relocation code,
        # into the final linkage.

        # Extract the list of relocations within .data.rel
        cmds=("$LD" "${args[@]}" "-r" "-o" "${output_elf}"
              "&&" "$OBJDUMP" "--reloc" "--syms" "--wide" "${output_elf}" ">" "${output_syms}")
        #if ! bash -x -c "${cmds[*]}" ; then
        #    echo "Failed to create intermediate relocations" >&2
        #    exit 1
        #fi
        # The relocations (and symbols they refer to) are now in ${output_syms}

        # We must generate a table of those relocations to include with our relocation code.
        cmds+=("&&" "$RORELOC" "${output_syms}" "-o" "$tmp_reloc")
        #if ! bash -x -c "${cmds[*]}" ; then
        #    echo "Failed to create relocation table" >&2
        #    exit 1
        #fi

        # Add the relocation code and the table to the inputs
        args+=("$tmp_reloc")

        # Final linkage with all the symbols and areas resolved
        if $use_ldmap ; then
            cmds+=("&&" "$LD" "${args[@]}" "-Map" "${output_syms}" "-o" "${output_elf}")
        else
            cmds+=("&&" "$LD" "${args[@]}" "-o" "${output_elf}" \
                   "&&" "$OBJDUMP" "--syms" "--wide" "${output_elf}" ">" "${output_syms}")
        fi
        cmds+=("&&" "$OBJCOPY" "-O" "binary" "-j" ".text" "-j" ".rodata" "-j" ".data.rel.ro" "-j" ".data" "-j" ".data.rel" "${output_elf}" "${output}" \
               "&&" "chmod" "a-x" "${output_elf}" "${output}" \
               "&&" "$ROSYMBOLS" "${output_syms}" "${output}")
        if [[ "$type" != '' && ! $output =~ ,([0-9a-f][0-9a-f][0-9a-f])$ ]] ; then
            cmds+=("&&" "mv" "${output}" "${output},${type}")
        fi
    fi

    echo "${cmds[*]}"
}


function install() {
    # They want to install the tools into the host environment, so that they can
    # run through the docker container.
    local args=("$@")

    TOOLS=(riscos64-cc \
           riscos64-link \
           riscos64-as \
           riscos64-libfile)

    TARGET="${args[0]}"
    in_container=false

    if [[ -f /dockcross ]] ; then
        in_container=true
        TARGET=/riscos-build
    fi

    if [[ "$TARGET" = '' ]] ; then
        # Try to install into a user's 'bin' directory, if we can.
        if [[ -d "$HOME/bin" ]] ; then
            TARGET="$HOME/bin"
        elif [[ -w "/usr/local/bin" ]] ; then
            TARGET="/usr/local/bin"
        fi
    fi

    if [[ "$TARGET" = '' || "${TARGET:0:2}" = '-h' ]] ; then
        echo "Syntax: $0 install [<target dir>]" >&2
        echo "Installation will attempt to write to ~/bin, or /usr/local/bin if no" >&2
        echo "target directory is supplied" >&2
        exit 1
    fi

    if [[ ! -d "$TARGET" ]] ; then
        mkdir -p "$TARGET"
    fi

    # Make target into an absolute path
    TARGET="$(canonicalise "$TARGET")"

    if $in_container ; then
        echo "ERROR: Running from within the container is not supported"
    else
        echo "Installing into directory '$TARGET'"
    fi

    # Remove any existing shell tool
    rm -f "${TARGET}/riscos64-shell"

    # Copy all the tools over there
    rm -f "${TARGET}/riscos64_resources"
    mkdir -p "${TARGET}/riscos64_resources/"
    cp -R "${CLIB64}"/* "${TARGET}/riscos64_resources/"

    # Create a marker file for every tool that we want to install
    for tool in "${TOOLS[@]}" ; do
        rm -f "$TARGET/$tool"
        ln -s "$TARGET/riscos64-shell" "$TARGET/$tool"
    done

    # We implicitly create the `riscos64-shell` command, which is this script.
    sed -E -e 's!^CLIB64=.*!CLIB64=${SCRIPTDIR}/riscos64_resources!' < "$0" > "${TARGET}/riscos64-shell"

    # Symlink each of our marker files to the riscos64-shell script, which will run
    # them with the same configuration as this.
    for toolfile in "${TOOLS[@]}" ; do
        echo "  Create tool $toolfile"
        ln -fs "riscos64-shell" "$TARGET/$toolfile"
        chmod +x "$TARGET/$toolfile"
    done
}


#set -x

TOOL=$(basename "$0")

cmd=
if [[ "$TOOL" != 'robuild64' ]] ; then
    # If the tool is one of our promoted tools, then the tool name is implicit.
    cmd="$TOOL"
    args=()
    # And the shell can be created too.
    if [[ "$cmd" == 'riscos64-shell' ]] ; then
        cmd=(bash)
    fi
    args+=("$@")
else
    if [[ "$*" == ''  || "$*:0:2" = '-h' ]] ; then
        echo "Syntax: ${TOOL} <commands>"
        exit 1
    fi

    if [[ "$1" == '--shell' || "$1" == 'shell' ]] ; then
        cmd=(bash)
        shift
    else
        cmd=("$1")
        shift
        args=("$@")
    fi
fi

function tool_help() {
    cat <<EOM
RISC OS 64-bit build helper tool.

This tool is used to allow builds for 64-bit RISC OS with command line tools
similar to those on RISC OS. The tool uses a docker image to create run the
cross-compile under GCC.

Syntax: robuild64 [<command> [<args>]]
Commands:

    install [<directory>]
        - Install the tools into a specific directory (defaults to ~/bin).

    shell [<commands>]
    bash [<commands>
        - Enter a shell in the build environment.

    riscos64-cc <GCC args>|-help
        - Compile, or link sources, with GCC.

    riscos64-as <GNU assembler args>
        - Assemble with GNU assembler.

    riscos64-link <ld args>|-help
        - Link with the GNU linker, applying linker script for AIF, RMF
          or Utility.
            -aif    - creates an absolute
            -rmf    - creates a module
            -util   - creates a utility

    riscos64-libfile <libfile args>
        - Create archives, using syntax like RISC OS libfile.

Environment variables:

    RISCOS64_RELDIRS
        - number of directories above the current directory to map into
          environment.

    RO64DEBUG
        - set to 1 to debug the tool's execution.
EOM
}


case "$cmd" in

    -h|-help|--help|help)
        tool_help
        exit
        ;;

    install)
        install "${args[@]}"
        exit
        ;;

    riscos64-cc|cc)
        args=($(riscos64_cc "${args[@]}"))
        ;;

    riscos64-as|as)
        args=($(riscos64_as "${args[@]}"))
        ;;

    riscos64-link|link)
        args=($(riscos64_link "${args[@]}"))
        ;;

    riscos64-libfile|libfile)
        args=($(riscos_libfile "${args[@]}"))
        ;;

    bash)
        if [[ "${#args}" != 0 ]] ; then
            args=(-c "\"${args[@]}\"")
        fi
        if [[ -t 0 ]] ; then
            # If this is a TTY, start as a login shell, interactively
            args=(-l -i "${args[@]}")
        fi
        args=(bash "${args[@]}")
        ;;

    *)
        echo "ERROR: Unrecognised command '$cmd'" >&2
        exit 1
esac

if [[ "$CT_VERSION" != '' ]] ; then
    # We are already inside the crosstool environment
    bash -c "${args[*]}"
else
    mkdir -p "${cache}"
    crosstool="$cache/dockcross-linux-arm64"
    if [[ ! -x "$crosstool" || ! -s "$crosstool" ]] ; then
        docker run --rm dockcross/linux-arm64:latest > "$crosstool"
        chmod +x "$crosstool"
    fi
    debug "Running crosstool for $cmd..."
    ct_args=(-v "${CLIB64}:/ro64/clib")
    ct_args+=(-v "${CLIB64}/linker:/ro64/linker")
    prefix_cmd=
    if [[ $RISCOS64_RELDIRS != 0 ]] ; then
        here=$PWD
        reldir=
        for i in $(seq $RISCOS64_RELDIRS) ; do
            cd ..
            reldir="/$(basename "$here")$reldir"
            here="$(dirname "$here")"
        done
        prefix_cmd="cd '${reldir:1:${#reldir}}' && "
    fi

    debug "Running: ${args[*]}"

    "$crosstool" --args "${ct_args[*]}" \
         -- bash -c "$prefix_cmd${args[*]}"
fi
