MEMORY
{
    /* We build our modules to start at offset 4 to allow for the module heap header */
    rmf (rwx) : ORIGIN = 0x4, LENGTH = 0x10000000
}

SECTIONS
{
    RMF_BASE = 0x4;

    .text RMF_BASE :
    {
        __CodeStart = ABSOLUTE(.);

        KEEP(*(.init.rmf));
        *(.init.rmf)
        *(.text)
        *(SORT(.text.*))
        . = ALIGN(16);
        __CodeEnd = ABSOLUTE(.);
    } > rmf
    __CodeSize = SIZEOF(.text);

    .rodata . : {
        __RODataStart = ABSOLUTE(.);
        *(.rodata)
        *(.data.ro)
        *(SORT(.rodata.*))
        *(SORT(.data.ro.*))

        . = ALIGN(8);
        __GOTStart = ABSOLUTE(.);
        *(.got)
        *(.got.plt)
        __GOTEnd = ABSOLUTE(.);

        . = ALIGN(8);
    } > rmf

    .data.rel.ro . : {
        __RODataRelStart = ABSOLUTE(.);
        *(.data.rel.ro)
        *(SORT(.data.rel.ro.*))

        *(.riscos.reloc)

        /* Align the following .data region (R/W) at a page boundary */
        . = ALIGN(4096);
    } > rmf
    __RODataEnd = ABSOLUTE(.);
    __RODataRelEnd = ABSOLUTE(.);

    __RODataSize = SIZEOF(.rodata) + SIZEOF(.data.rel.ro);
    __ROSize = __RODataSize + __CodeSize;

    .data . : {
        __DataStart = ABSOLUTE(.);
        /* FIXME: We may wish to align to a page boundary here */
        *(.data)
        . = ALIGN(16);
    } > rmf

    __DataRelStart = ABSOLUTE(.);
    .data.rel . : {
        . = ALIGN(16);
        *(.data.rel)
        *(SORT(.data.rel.*))

        . = ALIGN(16);

        /* The zero initialised region follows */
    } > rmf
    __DataEnd = ABSOLUTE(.);
    __DataRelEnd = ABSOLUTE(.);
    __DataRelSize = SIZEOF(.data.rel);
    __DataSize = SIZEOF(.data) + SIZEOF(.data.rel);

    __ZIStart = ABSOLUTE(.);
    .bss (NOLOAD) : {
        *(.bss .bss.*)
        . = ALIGN(16);
    } > rmf
    __ZIEnd = ABSOLUTE(.);
    __ZISize = SIZEOF(.bss);


    __RWSize = __DataSize + __ZISize;

    /* Discard any sections not named */
    /DISCARD/ : {*(*)}
}
