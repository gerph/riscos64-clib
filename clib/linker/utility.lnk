MEMORY
{
    util (rwx) : ORIGIN = 0x0, LENGTH = 0x10000000
}

SECTIONS
{
    UTIL_BASE = 0x0;

    .text UTIL_BASE :
    {
        _util64_header = .;
        __CodeStart = ABSOLUTE(.);

        /* 00000000 */ LONG(0xea000005)                 /* .... : B       &0000001C ; ARM32 entry */
        /* 00000004 */ LONG(0x79766748)                 /* Hgvy : magic 1 */
        /* 00000008 */ LONG(0x216c6776)                 /* vgl! : magic 2 */
        /* 0000000c */ LONG(__ROSize)                   /* .... : Read-only size */
        /* 00000010 */ LONG(__RWSize)                   /* .... : Read-write size */
        /* 00000014 */ LONG(0x00000040)                 /* @... : Bitness + flags */
        /* 00000018 */ LONG(_entry)                     /* .... : ARM64 entry */
        /* 0000001c */ LONG(0xe28f0004)                 /* .... : ADR     r0, &00000024 */
        /* 00000020 */ LONG(0xe3500102)                 /* ..P. : CMP     r0, #&80000000 */
        /* 00000024 */ LONG(0xe1a0f00e)                 /* .... : MOV     pc, lr */
        /* 00000028 */ LONG(0x00000000)                 /* .... : error number */
        /* 0000002c */ LONG(0x63724141)                 /* AArc : error message... */
        /* 00000030 */ LONG(0x20343668)                 /* h64  :  */
        /* 00000034 */ LONG(0x616e6962)                 /* bina :  */
        /* 00000038 */ LONG(0x73656972)                 /* ries :  */
        /* 0000003c */ LONG(0x6e616320)                 /*  can :  */
        /* 00000040 */ LONG(0x20746f6e)                 /* not  :  */
        /* 00000044 */ LONG(0x72206562)                 /* be r :  */
        /* 00000048 */ LONG(0x6f206e75)                 /* un o :  */
        /* 0000004c */ LONG(0x3233206e)                 /* n 32 :  */
        /* 00000050 */ LONG(0x20746962)                 /* bit  :  */
        /* 00000054 */ LONG(0x43534952)                 /* RISC :  */
        /* 00000058 */ LONG(0x00534f20)                 /*  OS. :  */

        *(.text)
        *(SORT(.text.*))
        . = ALIGN(16);
        __CodeEnd = ABSOLUTE(.);
    } > util
    __CodeSize = SIZEOF(.text);

    .rodata . : {
        __RODataStart = ABSOLUTE(.);
        *(.rodata)
        *(SORT(.rodata.*))
        *(.riscos.reloc)

        . = ALIGN(8);
        __GOTStart = ABSOLUTE(.);
        *(.got)
        *(.got.plt)
        __GOTEnd = ABSOLUTE(.);

        . = ALIGN(16);
        __RODataEnd = ABSOLUTE(.);
    } > util

    __RODataSize = SIZEOF(.rodata);
    __ROSize = __RODataSize + __CodeSize;

    .data . : {
        __DataStart = ABSOLUTE(.);
        /* FIXME: We may wish to align to a page boundary here */
        *(.data)
        . = ALIGN(16);
    } > util

    __DataRelStart = ABSOLUTE(.);
    .data.rel . : {
        . = ALIGN(16);
        *(.data.rel)
        *(SORT(.data.rel.*))

        . = ALIGN(16);

        /* The zero initialised region follows */
    } > util
    __DataEnd = ABSOLUTE(.);
    __DataRelEnd = ABSOLUTE(.);
    __DataRelSize = SIZEOF(.data.rel);
    __DataSize = SIZEOF(.data) + SIZEOF(.data.rel);

    __ZIStart = ABSOLUTE(.);
    /* Note: Unlike the AIF or RMF scripts, we need to include the zero-init area in utilities */
    .bss . : {
        *(.bss .bss.*)
        . = ALIGN(16);
        LONG(0xFFFFFFFF) /* Force the section to be written out */
    } > util
    __ZIEnd = ABSOLUTE(.);
    __ZISize = SIZEOF(.bss);

    __RWSize = __DataSize + __ZISize;

    /* Place the eh_frame and others out of the way - we don't use them yet */
    .eh_frame (NOLOAD) : { *(.eh_frame) }
    .igot (NOLOAD) : { *(.igot.*) }
    .iplt (NOLOAD) : { *(.iplt) }

    .interp (NOLOAD) : { *(.interp) }
    .dynsym (NOLOAD) : { *(.dynsym) }
    .dynstr (NOLOAD) : { *(.dynstr) }
    .hash (NOLOAD) : { *(.hash) }
    .gnu.hash (NOLOAD) : { *(.gnu.hash) }

    __patchable_function_entries : { *(__patchable_function_entries) }
}
