MEMORY
{
    util (rwx) : ORIGIN = 0x0, LENGTH = 0x10000000
}

SECTIONS
{
    UTIL_BASE = 0x0;

    .text UTIL_BASE :
    {
        _code_start = ABSOLUTE(.);

        /* 00000000 */ LONG(0xea000005)                 /* .... : B       &0000001C ; ARM32 entry */
        /* 00000004 */ LONG(0x79766748)                 /* Hgvy : magic 1 */
        /* 00000008 */ LONG(0x216c6776)                 /* vgl! : magic 2 */
        /* 0000000c */ LONG(_code_size + _rodata_size)  /* .... : Read-only size */
        /* 00000010 */ LONG(_data_size + _zinit_size)   /* .... : Read-write size */
        /* 00000014 */ LONG(0x00000040)                 /* @... : Bitness + flags */
        /* 00000018 */ LONG(_entry)                     /* .... : ARM64 entry */
        /* 0000001c */ LONG(0xe28f0004)                 /* .... : ADR     r0, &00000024 */
        /* 00000020 */ LONG(0xe3500102)                 /* ..P. : CMP     r0, #&80000000 */
        /* 00000024 */ LONG(0xe1a0f00e)                 /* .... : MOV     pc, lr */
        /* 00000028 */ LONG(0x00000000)                 /* .... : error number */
        /* 0000002c */ LONG(0x63724141)                 /* AArc : error message... */
        /* 00000030 */ LONG(0x20343668)                 /* h64  :  */
        /* 00000034 */ LONG(0x616e6962)                 /* bina :  */
        /* 00000038 */ LONG(0x73656972)                 /* ries :  */
        /* 0000003c */ LONG(0x6e616320)                 /*  can :  */
        /* 00000040 */ LONG(0x20746f6e)                 /* not  :  */
        /* 00000044 */ LONG(0x72206562)                 /* be r :  */
        /* 00000048 */ LONG(0x6f206e75)                 /* un o :  */
        /* 0000004c */ LONG(0x3233206e)                 /* n 32 :  */
        /* 00000050 */ LONG(0x20746962)                 /* bit  :  */
        /* 00000054 */ LONG(0x43534952)                 /* RISC :  */
        /* 00000058 */ LONG(0x00534f20)                 /*  OS. :  */

        *(.text)
        . = ALIGN(16);
        _code_end = ABSOLUTE(.);
        _code_size = _code_end - _code_start;

        _rodata_start = ABSOLUTE(.);
        *(.rodata)
        *(.rodata.*)
        *(.got)
        *(.got.plt)
        . = ALIGN(16);
        _rodata_end = ABSOLUTE(.);
        _rodata_size = _rodata_end - _rodata_start;

        _rodata_plus_code_size = _rodata_size + _code_size;

        _data_start = ABSOLUTE(.);
        *(.data)
        . = ALIGN(16);
        _data_end = ABSOLUTE(.);
        _data_size = _data_end - _data_start;

        /* The zero initialised region */
        . = ALIGN(16);

        _zinit_start = ABSOLUTE(.);
        *(.bss)
        *(.bss.*)
        . = ALIGN(4);
        LONG(0x0)
        _zinit_end = ABSOLUTE(.);
        _zinit_size = _zinit_end - _zinit_start;

    } > util

    /* Place the eh_frame and others out of the way - we don't use them yet */
    .eh_frame (NOLOAD) : { *(.eh_frame) }
    .igot (NOLOAD) : { *(.igot.*) }
    .iplt (NOLOAD) : { *(.iplt) }

    .interp (NOLOAD) : { *(.interp) }
    .dynsym (NOLOAD) : { *(.dynsym) }
    .dynstr (NOLOAD) : { *(.dynstr) }
    .hash (NOLOAD) : { *(.hash) }
    .gnu.hash (NOLOAD) : { *(.gnu.hash) }

    __patchable_function_entries : { *(__patchable_function_entries) }
}
